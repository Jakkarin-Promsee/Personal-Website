<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Home</title>
  <!-- Bootstrap CSS -->
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <script src="/js/bootstrap.bundle.min.js"></script> <!-- Bootstrap JS -->
  <!-- Custom styles for this template -->
  <link href="/home/navbar.css" rel="stylesheet">
  <link rel="stylesheet" href="/to-do-list.css">
</head>

<body>
  <%- include('assets/header') %>

  <!-- Modal -->
  <div class="modal fade" id="main_modal" tabindex="-1" aria-labelledby="customDayModalLabel" aria-hidden="true">
    <div class="modal-dialog" id="main_modal_content">
      <!-- JavaScript will dynamically render detail here -->
    </div>
  </div>

  <!-- Plan Table -->
  <div class="px-1 px-md-2  my-3">
    <div class="d-flex align-self-center align-items-center mb-2 ps-0 ps-md-3 ps-lg-5 ">
      <h1 class="display-3 fs-2 fw-bold text-body-emphasis pt-2 pe-2">TODO LIST</h1>

      <div class="d-flex align-items-center">
        <!-- Dropdown for Preset Days -->
        <div class="container my-4">
          <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
              Select a Day
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" id="dateChoiceBody">
              <!-- JavaScript dynamically render detial here -->
            </ul>
          </div>
        </div>
      </div>

    </div>

    <div class="px-0 px-md-3 px-lg-5">
      <table class="table mx table-bordered">
        <thead>
          <tr class="text-center fs-5 ">
            <th class="table-custom-dark column-number" scope="col">#</th>
            <th class="table-custom-dark column-checkbox" scope="col">Done?</th>
            <th class="table-custom-dark column-plan" scope="col">Plan</th>
            <th class="table-custom-dark column-time" scope="col">Time</th>
            <th class="table-custom-dark column-edit" scope="col">Edit</th>
          </tr>
        </thead>
        <tbody id="taskTableBody">
          <!-- JavaScript will dynamically load tasks here -->
        </tbody>
      </table>
    </div>

  </div>

  <script>
    let todayDate = '<%= locals.serveDate? serveDate: '' %>';
    console.log(todayDate);

    async function loadTasksByDate(date) {
      try {
        if (!date) date = todayDate;

        const response = await fetch(`/todos/loadtaskbydate?date=${date}`);
        const tasks = await response.json();

        const tableBody = document.getElementById('taskTableBody');
        tableBody.innerHTML = ''; // Clear the table

        tasks.forEach((task, index) => {
          tableBody.innerHTML += `
            <tr class="text-center fs-5 custom-text-content">
              <th scope="row">${index + 1}</th>
              <td>
                <input 
                class="form-check-input" 
                type="checkbox" 
                value="on" 
                data-id="${task._id}" 
                ${task.done ? 'checked' : '' } 
                onchange="checktask('${task._id}', this.checked)"
                />
              </td>
              <td>${task.plan_detail}</td>
              <td>${task.timeRange[0]? task.timeRange[0] : "-"} ${task.timeRange[1]? "-"+task.timeRange[1] : ""}</td>
              <td>
                <div class="d-flex justify-content-between">
                  <button class="btn btn-primary btn-sm w-100 me-1 fs-6 custom-text-content" type="button" onclick="handleEditTask('${task._id}')">Edit</button>
                  <button class="btn btn-danger btn-sm w-100 ms-1 fs-6 custom-text-content" type="button" onclick="handleDeleteTask('${task._id}')">Delete</button>
                </div>
              </td>
            </tr>
          `;
        });

        tableBody.innerHTML += `
        <tr class="text-center fs-5 custom-text-content">
          <th scope="row">${ tasks.length + 1 } </th>
          <td colspan="4">
             <!-- Header of Custom Day Button -->
             <div class="d-flex justify-content-between text-center">
               <button type="button" class="btn btn-success btn-sm w-100 me-1 fs-6 custom-text" onclick="handleAddTask()">
                 Add new task
               </button>
             </div>
          </td>
        </tr>
        `

        const nowDate = new Date().toISOString().split('T')[0];
        dateSelectionchoice = document.getElementById('dateChoiceBody');
        dateSelectionchoice.innerHTML = '';

        dateSelectionchoice.innerHTML += `<li><a class=" dropdown-item"><- Custom -></a></li>`

        // show 10 day
        for (let i = 0; i < 10; i++) {
          dateSelectionchoice.innerHTML += `<li><a class="dropdown-item" href="/todos?date=${removeDay(nowDate, i)}">${removeDay(nowDate, i)}</a></li>`
        }

      } catch (error) {
        console.error('Error loading tasks:', error);
      }
    }

    function removeDay(refDate, i) {
      const date = new Date(refDate);
      date.setDate(date.getDate() - i);
      return date.toISOString().split('T')[0];
    }

    async function loadTaskById(taskId) {
      try {
        const response = await fetch('/todos/loadtaskbyid', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            taskId: taskId,
          }),
        });

        if (response.ok) {
          const task = await response.json();
          return task;
        } else {
          throw new Error('Failed to update task');

          const result = await response.json();
          console.log(result.isDone); // Success message from the server
          console.log(result.message); // Success message from the server
        }

      } catch {
        console.error('Error updating task status:', error);
      }
    }

    async function checktask(taskId, isDone) {
      try {
        const response = await fetch(`/todos/checktask`, {
          method: 'POST', // Change to POST
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            taskId: taskId,
            isDone: isDone
          }), // Send the updated status
        });

        if (!response.ok) {
          throw new Error('Failed to update task');

          const result = await response.json();
          console.log(result.isDone); // Success message from the server
          console.log(result.message); // Success message from the server
        }
      } catch {
        console.error('Error updating task status:', error);
      }
    };

    async function addTask(task) {
      const taskData = {
        date: task.date.value,
        plan_detail: task.plan_detail.value,
        timeRange: [task.startTime.value, task.endTime.value],
        priority: task.priority.value,
        reward_detail: task.reward_detail.value
      }

      try {
        // Send the data via a POST request to the server
        const response = await fetch('/todos/addTask', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json', // Send as JSON
          },
          body: JSON.stringify(taskData), // Send the data
        });

        if (response.ok) {
          const result = await response.json();
          console.log('Task added successfully:', result);


          document.getElementById('taskForm').reset();

          loadTasksByDate();
          closeModal();

        } else {
          console.error('Failed to add task:', response.statusText);
        }
      } catch (error) {
        console.error('Error:', error);
      }
    }

    function handleAddTask() {
      renderTaskFormModal();

      // Add task with event listener
      document.getElementById('taskForm').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission behavior
        addTask(this); // Call addTask and pass the event object
      });

      openModal();
    }

    async function handleEditTask(tasktId) {
      task = await loadTaskById(tasktId);
      renderTaskFormModal(task);

      // Add task with event listener
      document.getElementById('taskForm').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission behavior
        editTask(tasktId, this); // Call addTask and pass the event object
      });

      openModal();
    }

    async function editTask(taskId, task) {
      const taskData = {
        taskId: taskId,
        date: task.date.value,
        plan_detail: task.plan_detail.value,
        timeRange: [task.startTime.value, task.endTime.value],
        priority: task.priority.value,
        reward_detail: task.reward_detail.value
      }

      try {
        const response = await fetch('/todos/updatetask', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json', // Send as JSON
          },
          body: JSON.stringify(taskData)
        });

        if (response.ok) {
          const result = await response.json();
          console.log('Task added successfully:', result);

          document.getElementById('taskForm').reset();
          loadTasksByDate();
          closeModal();

        } else {
          console.error('Failed to add task:', response.statusText);
        }

      } catch (error) {
        console.error('Error:', err);
      }
    }

    function handleDeleteTask(taskId) {
      renderConfirmModal(taskId);

      // delete task with event listener
      document.getElementById('confirmDeleteButton').addEventListener('click', function(event) {
        event.preventDefault(); // Prevent the default form submission behavior
        deleteTask(taskId); // Call addTask and pass the event object
      });

      openModal();
    }

    let modalInstance;

    function initializeModal() {
      const modalElement = document.getElementById('main_modal');
      modalInstance = new bootstrap.Modal(modalElement); // Initialize once
    }

    function openModal() {
      if (modalInstance) {
        modalInstance.show(); // Reuse the initialized modal instance
      } else initializeModal();
    }

    function closeModal() {
      if (modalInstance) {
        modalInstance.hide(); // Reuse the initialized modal instance
      } else initializeModal();
    }

    function renderTaskFormModal(modalPropoties) {
      modal = document.getElementById('main_modal_content');
      modal.innerHTML = "";

      if (!modalPropoties) modalPropoties = {};
      console.log(modalPropoties);
      console.log(modalPropoties.priority == 1);

      modal.innerHTML = `
        <div class="modal-content">

          <div class="modal-header">
            <h5 class="modal-title" id="customDayModalLabel">Add New Task</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>

          <form id="taskForm">
            <div class="modal-body">
              <!-- Date Field -->
              <div class="mb-3">
                <label class="form-label" for="date">Date:</label>
                <input type="date" value="${modalPropoties.date? modalPropoties.date: todayDate}" required class="form-control" id="date">
              </div>

              <!-- Plan Detail Field -->
              <div class="mb-3 ">
                <label class="form-label" for="plan_detail">Plan Detail:</label>
                <input type="text" required class="form-control" id="plan_detail" autocomplete="off" value="${modalPropoties.plan_detail? modalPropoties.plan_detail: ""}">
              </div>

              <!-- Time Range Fields -->
              <div class="d-flex justify-content-between mb-3">
                <div class="w-100">
                  <label class="form-label" for="startTime">Time:</label>
                  <input type="time" class="form-control" id="startTime" value="${modalPropoties.timeRange? modalPropoties.timeRange[0]: ""}">
                </div>
                <div class="mx-1"></div>
                <div class="w-100">
                  <label class="form-label" for="endTime">To:</label>
                  <input type="time" class="form-control" id="endTime" value="${modalPropoties.timeRange? modalPropoties.timeRange[1]: ""}">
                </div>
              </div>

              <!-- Priority Select -->
              <div class="mb-3 w-100">
                <label class="form-label" for="priority">Priority:</label>
                <select class="custom-select form-control" id="priority">
                  <option ${!modalPropoties.priority? "selected" :""} value="3">Choose...</option>
                  <option ${modalPropoties.priority==0? "selected" :""} value="0">Q1: Urgent and important</option>
                  <option ${modalPropoties.priority==1? "selected" :""} value="1">Q2: Urgent but not important</option>
                  <option ${modalPropoties.prioriy==2? "selected" :""} value="2">Q3: Not urgent but important</option>
                  <option ${modalPropoties.priority==3? "selected" :""} value="3">Q4: Neither urgent nor important</option>
                </select>
              </div>
              <!-- Reward Detail Field -->
              <div class="mb-3 ">
                <label class="form-label" for="reward_detail">Reward Detail:</label>
                <input type="text" class="form-control" id="reward_detail" value="${modalPropoties.reward_detail? modalPropoties.reward_detail: ""}">
              </div>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" class="btn btn-primary" >Add</button>
            </div>
          </form>

        </div>
      `
    }

    function renderConfirmModal(taskId) {
      modal = document.getElementById('main_modal_content');
      modal.innerHTML = "";

      modal.innerHTML = `
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="confirmDeleteLabel">Confirm Deletion</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            Are you sure you want to delete this item?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
            <button type="button" class="btn btn-danger" id="confirmDeleteButton">Yes, Delete</button>
          </div>
        </div>
      `
    }

    async function deleteTask(taskId) {
      try {
        const response = await fetch(`/todos/deletetask`, {
          method: 'POST', // Change to POST
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            taskId: taskId,
          }), // Send the updated status
        });
        if (response.ok) {
          closeModal();
          loadTasksByDate();
        } else {
          throw new Error('Failed to delete task');

          const result = await response.json();
          console.log(result.isDone); // Success message from the server
          console.log(result.message); // Success message from the server
        }
      } catch {
        console.error('Error updating task status:', error);
      }
    }

    // Load tasks when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      loadTasksByDate();
      initializeModal();
    });
  </script>

</body>

</html>