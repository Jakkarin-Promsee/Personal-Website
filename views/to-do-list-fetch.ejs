<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Home</title>
  <!-- Bootstrap CSS -->
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <script src="/js/bootstrap.bundle.min.js"></script> <!-- Bootstrap JS -->
  <!-- Custom styles for this template -->
  <link href="/home/navbar.css" rel="stylesheet">
  <link rel="stylesheet" href="/to-do-list.css">
</head>

<body>
  <%- include('assets/header') %>

  <!-- Main content Modal -->
  <div class="modal fade" id="main_modal" tabindex="1" aria-labelledby="main_modal_label" aria-hidden="true">
    <div class="modal-dialog" id="main_modal_content">
      <!-- JavaScript will dynamically render detail here -->
    </div>
  </div>

  <!-- Confirm Modal -->
  <div class="modal fade" id="confirm_modal" tabindex="2" aria-labelledby="confirm_modal_label" aria-hidden="true">
    <div class="modal-dialog" id="confirm_modal_content">
      <!-- JavaScript will dynamically render detail here -->
    </div>
  </div>

  <!-- Plan Table -->
  <div class="px-1 px-md-2  my-3">
    <div class="d-flex align-self-center align-items-center mb-2 ps-0 ps-md-3 ps-lg-5 ">
      <h1 class="display-3 fs-2 fw-bold text-body-emphasis pt-2 pe-2">TODO LIST</h1>

      <div class="d-flex align-items-center">
        <!-- Dropdown for Preset Days -->
        <div class="container my-4">
          <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
              Select a Day
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" id="dateChoiceBody">
              <!-- JavaScript dynamically render detial here -->
            </ul>
          </div>
        </div>
      </div>

    </div>

    <div class="px-0 px-md-3 px-lg-5">
      <table class="table mx table-bordered">
        <thead>
          <tr class="text-center fs-5 ">
            <th class="table-custom-dark column-number" scope="col">#</th>
            <th class="table-custom-dark column-checkbox" scope="col">Done?</th>
            <th class="table-custom-dark column-plan" scope="col">Plan</th>
            <th class="table-custom-dark column-time" scope="col">Time</th>
            <th class="table-custom-dark column-edit" scope="col">Edit</th>
          </tr>
        </thead>
        <tbody id="taskTableBody">
          <!-- JavaScript will dynamically load tasks here -->
        </tbody>
      </table>
    </div>

  </div>

  <script>
    // Declare global variable to indicate date of this page. 
    // (server send date variable, if not, set date to today date 'yy/mm/dd')
    let todayDate = '<%= locals.serveDate? serveDate : Date().toISOString().split('T')[0] %>';

    // Declare global variable to indicate instance of main and confirm modal.
    // --> Main modal use to recieve and send information to users such as form, edit, etc.
    // --> Confirm modal use to comfirm users action such as delete, cancel, etc.
    let mainModalInstance;
    let confirmModalInstance;

    // Declare global variable to control open-close modal. Use to avoid modal close by mistake.
    // ture is defult value, mean allow to close this modal automatically.
    let closePermission = true;

    // Load tasks when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      handleLoadPage();
      initializeModals();
    });


    // -------------- Once use function when lodaing page --------------

    // Initialize Modal
    function initializeModal(modalId) {
      return new bootstrap.Modal(document.getElementById(modalId))
    }

    // Set Modal instance
    function initializeModals() {
      mainModalInstance = initializeModal('main_modal');
      confirmModalInstance = initializeModal('confirm_modal');
    }

    // -------------- Fetching function --------------

    async function fetchAPI(url, method = 'GET', bodyData = null) {
      const options = {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
      };

      if (bodyData) {
        options.body = JSON.stringify(bodyData);
      }

      try {
        const response = await fetch(url, options);

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Something went wrong');
        }

        return await response.json(); // Assume most responses will be JSON
      } catch (error) {
        console.error(`Error during fetch on ${url}: ${error.message}`);
        return null;
      }
    }

    async function loadTasksByDate(date) {
      return await fetchAPI(`/todos/loadtaskbydate?date=${date || todayDate}`);
    }

    async function loadTaskById(taskId) {
      return await fetchAPI('/todos/loadtaskbyid', 'POST', {
        taskId: taskId
      });
    }

    async function checkTask(taskId, isDone) {
      return await fetchAPI(`/todos/checktask`, 'POST', {
        taskId: taskId,
        isDone: isDone
      });
    };

    async function addTask(task) {
      return await fetchAPI('/todos/addTask', 'POST', {
        date: task.date.value,
        plan_detail: task.plan_detail.value,
        timeRange: [task.startTime.value, task.endTime.value],
        priority: task.priority.value,
        reward_detail: task.reward_detail.value
      });
    }

    async function editTask(taskId, task) {
      return await fetchAPI('/todos/updatetask', 'POST', {
        taskId: taskId,
        date: task.date.value,
        plan_detail: task.plan_detail.value,
        timeRange: [task.startTime.value, task.endTime.value],
        priority: task.priority.value,
        reward_detail: task.reward_detail.value
      });
    }

    async function deleteTask(taskId) {
      return await fetchAPI('/todos/deletetask', 'POST', {
        taskId: taskId
      });
    }


    // -------------- handle function --------------

    // Force show modal
    function showModal(modalInstance) {
      if (modalInstance) {
        modalInstance.show();
      } else initializeModal();
    }

    // Force hide modal
    function hideModal(modalInstance) {
      if (modalInstance) {
        const defaultV = closePermission;

        closePermission = true;
        modalInstance.hide();

        closePermission = defaultV;
      } else initializeModal();
    }

    async function loadTable() {
      // Load today tasks and Sent it to table
      const tasks = await loadTasksByDate();

      if (tasks) {
        renderTaskTable(tasks);
      } else {
        alert('Failed to load tasks.');
      }
    }

    async function handleLoadPage() {
      // Set select date button
      renderSelectDate();

      // Load today tasks and Sent it to table
      await loadTable();
    }

    function renderConfirmToQuitModal() {
      // render the modal detail
      renderConfirmModal();

      // Set false to permission, make close modal function was prevented
      // Link to hide function to show comfirm to quite modal
      closePermission = false;
      document.getElementById('main_modal').addEventListener('hide.bs.modal', function(event) {
        // If users close the modal by don't have permistion showing the comfirm modal
        if (!closePermission) {
          event.preventDefault();
          showModal(confirmModalInstance);
        }
      });

      // When comfrim button in modal was pressed, close all modal
      document.getElementById('confirmButton').onclick = function(event) {
        // hide modal is force to close all modal
        hideModal(mainModalInstance);
        hideModal(confirmModalInstance);

        // Set permission to default
        closePermission = true;
      };
    }

    async function handleCheckTask(taskId, checked) {
      const response = await checkTask(taskId, checked);

      if (response) {
        await loadTable();
      } else {
        alert('Failed to update task status.');
      }

    }

    async function handleAddTask() {
      // Render form modal
      renderTaskFormModal();
      showModal(mainModalInstance)

      // Render funciton to open confirm modal before quit form
      renderConfirmToQuitModal()

      // When submit, use fetch function to connect server
      document.getElementById('taskForm').addEventListener('submit', async function(event) {
        event.preventDefault();
        const response = await addTask(this);

        if (response) {
          // Reset form
          this.reset();

          await loadTable();
          hideModal(mainModalInstance)
        } else {
          alert('Failed to update task status.');
        }
      });
    }

    async function handleEditTask(tasktId) {
      // Render form modal, request task from server
      task = await loadTaskById(tasktId);
      renderTaskFormModal(task);
      showModal(mainModalInstance);

      // Render funciton to open confirm modal before quit form
      renderConfirmToQuitModal()

      // when submit, use fetch function to connect server
      document.getElementById('taskForm').addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent the default form submission behavior
        const response = await editTask(tasktId, this); // Call addTask and pass the event object

        if (response) {
          // Reset form
          this.reset();

          await loadTable();
          hideModal(mainModalInstance);
        } else {
          alert('Failed to update task status.');
        }
      });
    }

    async function handleDeleteTask(taskId) {
      // Render confirm modal
      renderConfirmModal();
      showModal(confirmModalInstance);

      // when submit, use fetch function to connect server
      document.getElementById('confirmButton').addEventListener('click', async function(event) {
        event.preventDefault(); // Prevent the default form submission behavior

        const response = await deleteTask(taskId)

        if (response) {
          await loadTable();
          hideModal(confirmModalInstance);
        } else {
          alert('Failed to update task status.');
        }
      });
    }

    // -------------- render function --------------

    function removeDay(refDate, i) {
      const date = new Date(refDate);
      date.setDate(date.getDate() - i);
      return date.toISOString().split('T')[0];
    }

    function renderSelectDate() {
      dateSelectionchoice = document.getElementById('dateChoiceBody');
      dateSelectionchoice.innerHTML = '';

      const nowDate = new Date().toISOString().split('T')[0];

      dateSelectionchoice.innerHTML += `<li><a class=" dropdown-item">
          <- Custom ->
        </a></li>`

      // show 10 day
      for (let i = 0; i < 10; i++) {
        dateSelectionchoice.innerHTML += `<li><a class="dropdown-item" href="/todos?date=${removeDay(nowDate, i)}">${removeDay(nowDate, i)}</a></li>`
      }
    }

    function renderTaskTable(tasks) {
      const tableBody = document.getElementById('taskTableBody');
      tableBody.innerHTML = ''; // Clear the table

      tasks.forEach((task, index) => {
        tableBody.innerHTML += `
      <tr class="text-center fs-5 custom-text-content">
        <th scope="row">${index + 1}</th>
        <td>
          <input class="form-check-input" type="checkbox" value="on" data-id="${task._id}" ${task.done ? 'checked' : '' } onchange="handleCheckTask('${task._id}', this.checked)" />
        </td>
        <td>${task.plan_detail}</td>
        <td>${task.timeRange[0]? task.timeRange[0] : "-"} ${task.timeRange[1]? "- "+task.timeRange[1] : ""}</td>
        <td>
          <div class="d-flex justify-content-between">
            <button class="btn btn-primary btn-sm w-100 me-1 fs-6 custom-text-content" type="button" onclick="handleEditTask('${task._id}')">Edit</button>
            <button class="btn btn-danger btn-sm w-100 ms-1 fs-6 custom-text-content" type="button" onclick="handleDeleteTask('${task._id}')">Delete</button>
          </div>
        </td>
      </tr>
      `;
      });

      tableBody.innerHTML += `
      <tr class="text-center fs-5 custom-text-content">
        <th scope="row">${ tasks.length + 1 } </th>
        <td colspan="4">
          <!-- Header of Custom Day Button -->
          <div class="d-flex justify-content-between text-center">
            <button type="button" class="btn btn-success btn-sm w-100 me-1 fs-6 custom-text" onclick="handleAddTask()">
              Add new task
            </button>
          </div>
        </td>
      </tr>
      `
    }

    function renderTaskFormModal(modalPropoties) {
      modal = document.getElementById('main_modal_content');
      modal.innerHTML = "";

      if (!modalPropoties) modalPropoties = {};

      modal.innerHTML = `
        <div class="modal-content">

          <div class="modal-header">
            <h5 class="modal-title" id="customDayModalLabel">Add New Task</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>

          <form id="taskForm">
            <div class="modal-body">
              <!-- Date Field -->
              <div class="mb-3">
                <label class="form-label" for="date">Date:</label>
                <input type="date" value="${modalPropoties.date? modalPropoties.date: todayDate}" required class="form-control" id="date">
              </div>

              <!-- Plan Detail Field -->
              <div class="mb-3 ">
                <label class="form-label" for="plan_detail">Plan Detail:</label>
                <input type="text" required class="form-control" id="plan_detail" autocomplete="off" value="${modalPropoties.plan_detail? modalPropoties.plan_detail: ""}">
              </div>

              <!-- Time Range Fields -->
              <div class="d-flex justify-content-between mb-3">
                <div class="w-100">
                  <label class="form-label" for="startTime">Time:</label>
                  <input type="time" class="form-control" id="startTime" value="${modalPropoties.timeRange? modalPropoties.timeRange[0]: ""}">
                </div>
                <div class="mx-1"></div>
                <div class="w-100">
                  <label class="form-label" for="endTime">To:</label>
                  <input type="time" class="form-control" id="endTime" value="${modalPropoties.timeRange? modalPropoties.timeRange[1]: ""}">
                </div>
              </div>

              <!-- Priority Select -->
              <div class="mb-3 w-100">
                <label class="form-label" for="priority">Priority:</label>
                <select class="custom-select form-control" id="priority">
                  <option ${!modalPropoties.priority? "selected" :""} value="3">Choose...</option>
                  <option ${modalPropoties.priority==0? "selected" :""} value="0">Q1: Urgent and important</option>
                  <option ${modalPropoties.priority==1? "selected" :""} value="1">Q2: Urgent but not important</option>
                  <option ${modalPropoties.prioriy==2? "selected" :""} value="2">Q3: Not urgent but important</option>
                  <option ${modalPropoties.priority==3? "selected" :""} value="3">Q4: Neither urgent nor important</option>
                </select>
              </div>
              <!-- Reward Detail Field -->
              <div class="mb-3 ">
                <label class="form-label" for="reward_detail">Reward Detail:</label>
                <input type="text" class="form-control" id="reward_detail" value="${modalPropoties.reward_detail? modalPropoties.reward_detail: ""}">
              </div>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" class="btn btn-primary" >Add</button>
            </div>
          </form>

        </div>
      `
    }

    function renderConfirmModal(modalPropoties) {
      modal = document.getElementById('confirm_modal_content');
      modal.innerHTML = "";

      if (!modalPropoties) modalPropoties = {};

      modal.innerHTML = `
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="confirmDeleteLabel">${modalPropoties.head? modalPropoties.head : 'Confirm'}</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            ${modalPropoties.body? modalPropoties.body : 'Are you sure you want to delete this item?'}
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
            <button type="button" class="btn btn-danger" id="confirmButton">${modalPropoties.confirm? modalPropoties.confirm : 'Yes, Confirm'} </button>
          </div>
        </div>
      `
    }
  </script>

</body>

</html>